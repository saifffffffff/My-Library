#pragma once

#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>
#include <cstdlib>

using namespace std;


enum enPrimeNotPrime { Prime = 1, NotPrime = 2 };
enum enSymbol { CapitalLetter, SmallLetter, SpecialChar, Digit };
 

namespace String {

	short Len(string word) {
		short counter = 0;
		while (true) {
			if (word[counter] == '\0')
				break;
			counter++;
		}
		return counter;
	}
	string SubString(string word, short from, short to = 0) {
		if (to == 0) to = Len(word) - 1;
		string subWord = "";
		for (short index = from; index <= to; index++)
			subWord += word[index];
		return subWord;
	}
	char LastChar(string word) {
		return word[Len(word) - 1];
	}
	string CleanWord(string word) {

		if (Len(word) == 1)
			return word;
		if (word[0] == word[1])
			return CleanWord(SubString(word, 1));

		return (word[0] + CleanWord(SubString(word, 1)));

	}
	void RemoveWordFromString(string & text , string word) {
		
		if (text.find(word) == string::npos ) return;

		text.erase(text.find(word) , word.size() + 1);
		
		RemoveWordFromString(text, word);
	}
	void SwapWordInString(string &  text, string OldWord, string NewWord) {
		
		if (text.find(OldWord) == string::npos ) return ;

		short oldWordPos = text.find(OldWord);
		text.erase(oldWordPos, OldWord.size());
		text.insert(oldWordPos, NewWord);

		
		SwapWordInString(text, OldWord, NewWord);

	}
}

namespace Random {
	int GenerateRandomNumber(int From, int To) {

		int randNum = rand() % (To - From + 1) + From;

		return randNum;

	}
	char GetRandomCharacter(enSymbol symbol) {
		switch (symbol)
		{
		case CapitalLetter:
			return char(GenerateRandomNumber(65, 90));

		case SmallLetter:
			return char(GenerateRandomNumber(97, 122));

		case SpecialChar:
			return char(GenerateRandomNumber(33, 47));

		case Digit:
			return char(GenerateRandomNumber(48, 57));

		default:
			break;
		}
	}
	string GenerateWord(short len, enSymbol symbol) {
		string word = "";

		for (int i = 0; i < len; i++)
			word += GetRandomCharacter(symbol);
		return word;
	}
	string GenerateKey() {
		string key = "";
		key = key + GenerateWord(4, CapitalLetter) + '-';
		key = key + GenerateWord(4, CapitalLetter) + '-';
		key = key + GenerateWord(4, CapitalLetter) + '-';
		key = key + GenerateWord(4, CapitalLetter);
		return key;

	}
	void GenerateKeys(int numberOfKeys) {

		for (int i = 0; i < numberOfKeys; i++) {
			cout << "key [" << i + 1 << "] : " << GenerateKey() << endl;
		}
	}

}

namespace Read{
	int ReadNumber(string message) {
	int num;
	cout << message;
	cin >> num;
	while (cin.fail()) {
		cin.clear();
		cout << "Invalid number.\n";
		cin.ignore(INT_MAX, '\n');
		cin >> num;
	}
	return num;
}
	int ReadValidNumber(string message) {
		int num;
		cout << message;
		cin >> num;
		while (cin.fail()) {
			cin.clear();
			cout << "Invalid number.\n";
			cin.ignore(INT_MAX, '\n');
			cin >> num;
		}
		return num;
	}
	int ReadPositiveNumber(string message) {
		int num;
		while (true) {
			cout << message;
			cin >> num;
			if (num > 0)
				return num;

		}
	}
	int ReadPositiveValidNumber(string message, string alertMessage = "") {
		int num = 0;
		cout << message;
		cin >> num;
		while (cin.fail() || num < 0) {
			cin.clear();
			cin.ignore(INT_MAX, '\n');
			cout << alertMessage;
			cin >> num;
		}
		return num;
	}
	int ReadNumberInRange(int from, int to, string message) {
		int num;
		do {
			cout << message;
			cin >> num;
		} while (num < from || num > to );
		return num;
	}
	int ReadValidNumberInRange(int from, int to, string message) {
		int num;
		cout << message;
		cin >> num;
		while (num < from || num > to || cin.fail()) {
			cin.clear();
			cout << message;
			cin.ignore(INT_MAX, '\n');
			cin >> num;
		}
		return num;
		
	}
	string ReadString(string message) {
		string str = "";
		cin.ignore(INT_MAX, '\n');
		while (str.empty()) {
			cout << message;
			getline(cin, str);
		}

		return str;
	}
	char ReadChar(string message) {
		char c;
		string input;
		cin.ignore(INT_MAX, '\n');
		while (true) {
			cout << message;
			getline(cin, input);
			if (String::Len(input) == 1) {
				c = input[0];
				break;
			}
		}
		return c;
	}
}


namespace Math {
	double MyAbs(double num) {

		if (num >= 0)
			return num;

		else
			return num * -1;


	}
	float GetFractionalpart(float num) {
		return  num - (int)num;
	}
	int MyRound(float num) {

		int intPart = num;
		float fractionalPart = GetFractionalpart(num);

		if (MyAbs(fractionalPart) >= 0.5) {
			if (num > 0)
				return ++intPart;
			else
				return --intPart;
		}
		else
		{
			return intPart;
		}
	}
	int MyFloor(float num) {
		if (num > 0)
			return (int)num;
		else
			return (int)num - 1;
	}
	int MyCeil(float num) {

		float fractionalPart = GetFractionalpart(num);

		if (fractionalPart != 0)
		{
			if (num > 0) {
				return int(num) + 1;
			}
			else {
				return int(num);
			}
		}
		else
			return num;
	}
	float MySqrt(float num) {

		return pow(num, 0.5);
	}
	enPrimeNotPrime CheckPrimeNumber(int num) {
		for (int i = 2; i <= (num / 2); i++)
			if (num % i == 0)
				return NotPrime;
		return Prime;
	}
}

namespace Utility {
	void Swap(int& A, int& B) {


		int temp = A;
		A = B;
		B = temp;

	}

}

namespace Array {
	void ReadArray(int arr[], int& size) {

		cout << "Enter number of elements : ";
		cin >> size;

		string message = "";
		for (int i = 0; i < size; i++) {
			message = "Enter Element [" + to_string(i + 1) + "] : ";
			arr[i] = Read::ReadPositiveNumber(message);
		}
	}
	void PrintArray(int arr[], int size) {
		for (int i = 0; i < size; i++)
			cout << arr[i] << " ";
		cout << endl;
	}
	void FillArrayWithRandomNumbers(int arr[], int size) {
		for (int i = 0; i < size; i++)
			arr[i] = Random::GenerateRandomNumber(-100, 100);
	}
	int FindMaxInArray(int arr[], int size) {
		int maxValue = INT_MIN;
		for (int i = 0; i < size; i++) {
			if (maxValue < arr[i])
				maxValue = arr[i];
		}
		return maxValue;
	}
	int FindMinInArray(int arr[], int size) {
		int minValue = INT_MAX;
		for (int i = 0; i < size; i++) {
			if (minValue > arr[i])
				minValue = arr[i];
		}
		return minValue;
	}
	int SumArray(int arr[], int size) {
		int sum = 0;
		for (int i = 0; i < size; i++) {
			sum += arr[i];
		}
		return sum;
	}
	float AvgOfArray(int arr[], int size) {
		return (float)SumArray(arr, size) / size;
	}
	void CopyArrOnlyPrimeNums(int arrSource[], int arrDestination[], int size1, int& size2) {
		int index = 0;
		for (int i = 0; i < size1; i++) {
			if (Math::CheckPrimeNumber(arrSource[i]) == Prime)
			{
				arrDestination[index] = arrSource[i];
				index++;
			}
		}
		size2 = index;

	}
	void SumTwoArrays(int arr1[], int arr2[], int arr3[], int size) {
		for (int i = 0; i < size; i++) {
			arr3[i] = arr1[i] + arr2[i];
		}
	}
	void PrintStringArray(string arr[], int size) {
		for (int i = 0; i < size; i++) {
			cout << "key [" << i + 1 << "] : " << arr[i] << endl;
		}
	}
	void ReadArrayOfKeys(string arr[], int size) {


		for (int i = 0; i < size; i++) {
			arr[i] = Random::GenerateKey();
		}
	}
	short FindNumberPositionInArray(int arr[], int num, int size) {
		for (int i = 0; i < size; i++) {
			if (arr[i] == num) {
				return i;
			}
		}
		// Not found
		return -1;
	}
	bool IsNumberInArray(int arr[], int number, int size) {

		return (FindNumberPositionInArray(arr, number, size) != -1);


	}
	void AddNumberToArray(int arr[], int& size, int number) {
		arr[size++] = number;
	}
	void AddNumbersToArray(int arr[], int& size) {

		bool AddMore = true;

		do
		{


			AddNumberToArray(arr, size, Read::ReadNumber("Please enter a number ? \n"));

			AddMore = Read::ReadNumber("Do you want to add more numbers? [0]: No ,[1]: Yes ? \n");


		} while (AddMore);
	}
	void CopyArrayUsingAddNumberToArray(int arrSource[], int arrDestination[], int sizeSource, int& DestinationArraySize) {

		for (int i = 0; i < sizeSource; i++) {
			AddNumberToArray(arrDestination, DestinationArraySize, arrSource[i]);
		}

	}
	void CopyArray(int arrSource[], int arrDestination[], int size) {
		for (int i = 0; i < size; i++)
			arrDestination[i] = arrSource[i];
	}
	void CopyOddNumbers(int arrSource[], int arrDestination[], int sizeSource, int& sizeDestination) {


		for (int i = 0; i < sizeSource; i++) {
			if (arrSource[i] % 2 != 0)
				AddNumberToArray(arrDestination, sizeDestination, arrSource[i]);
		}

	}
	void CopyPrimeNumbers(int arrSource[], int arrDestination[], int sizeSource, int& sizeDestination) {
		for (int i = 0; i < sizeSource; i++) {
			if (Math::CheckPrimeNumber(arrSource[i]) == Prime)
			{
				AddNumberToArray(arrDestination, sizeDestination, arrSource[i]);
			}
		}
	}
	void CopyDistinctNumbers(int arrSource[], int arrDestination[], int sizeSource, int& sizeDestination) {
		for (int i = 0; i < sizeSource; i++) {
			if (!IsNumberInArray(arrDestination, arrSource[i], sizeDestination))
			{
				AddNumberToArray(arrDestination, sizeDestination, arrSource[i]);
			}
		}

	}
	bool IsPalindromeArray(int arr[], int size) {

		for (int i = 0; i < size; i++) {
			if (arr[i] != arr[size - i - 1]) {
				return false;
			}
		}
		return true;
	}
	int CountOddNumbersInArray(int arr[], int size) {
		int counter = 0;
		for (int i = 0; i < size; i++) {
			if (arr[i] % 2 != 0)
				counter += 1;
		}
		return counter;
	}
	int CountEvenNumbersInArray(int arr[], int size) {
		int counter = 0;
		for (int i = 0; i < size; i++) {
			if (arr[i] % 2 == 0)
				counter += 1;
		}
		return counter;
	}
	int CountPositiveNumbersInArray(int arr[], int size) {
		int counter = 0;
		for (int i = 0; i < size; i++) {
			if (arr[i] > 0)
				counter += 1;
		}
		return counter;
	}
	int CountNegativeNumbersInArray(int arr[], int size) {
		int counter = 0;
		for (int i = 0; i < size; i++) {
			if (arr[i] < 0)
				counter += 1;
		}
		return counter;
	}
	void ShuffleArray(int arr[], int size) {

		for (int i = 0; i < size; i++) {
			Utility::Swap(arr[Random::GenerateRandomNumber(0, size - 1)], arr[Random::GenerateRandomNumber(0, size - 1)]);
		}

	}
	void CopyArrayInReversedOrder(int arrSource[], int arrDestination[], int size) {
		for (int i = 0; i < size; i++) {
			arrDestination[i] = arrSource[(size - 1) - i];
		}
	}
	void FillArrayFrom1ToN(int arr[], int size) {

		for (int i = 0; i < size; i++)
			arr[i] = i + 1;
	}
	short MaxLenStringInArray(string arr[], int size) {
		short MaxLen = String::Len(arr[0]);
		for (int i = 1; i < size; i++) {
			if (String::Len(arr[i]) > MaxLen)
				MaxLen = String::Len(arr[i]);
		}
		return MaxLen;
	}

}

namespace Table {

	struct stTable {
		short cols, rows;
		string HeadLines[10];
		string Elements[10][10];
	};
	
	string GetBorder(short num) {
		string border = "|";
		for (int i = 0; i < num; i++)
			border += "-";
		border += "|";
		return border;
	}

	void ReadTable(stTable& table) {

		table.cols = Read::ReadValidNumberInRange(1, 10, "How many Cols (1 - 10) ? ");
		table.rows = Read::ReadValidNumberInRange(1, 10, "How many Rows (HeadLines are not included) (1 - 10) ? ");

		cin.ignore(INT_MAX, '\n');

		for (int i = 0; i < table.cols; i++) {
			cout << "Head Line " << i + 1 << " : ";
			getline(cin, table.HeadLines[i]);
		}

	}
	void ReadTableElements(stTable& table) {
		for (int row = 0; row < table.rows; row++) {
			cout << "Row " << row + 1 << endl;
			for (int col = 0; col < table.cols; col++) {
				cout << table.HeadLines[col] << " : ";
				getline(cin, table.Elements[row][col]);
			}
		}
	}

	void PrintTableBorder(stTable table) {
		for (int i = 0; i < table.cols; i++)
			cout << GetBorder(String::Len(table.HeadLines[i]) + 8);
		cout << endl;
	}
	void PrintHeader(stTable table) {


		PrintTableBorder(table);

		for (int i = 0; i < table.cols; i++)
			cout << "|    " << table.HeadLines[i] << "    |";
		cout << endl;
		PrintTableBorder(table);


	}
	void PrintTableRow(stTable table, short row) {
		for (int col = 0; col < table.cols; col++) {
			cout << "|";
			
			short totalHeadLineAligment = 8 + String::Len(table.HeadLines[col]);
			short alignment = (totalHeadLineAligment - String::Len(table.Elements[row][col])) / 2 + String::Len(table.Elements[row][col]);
			cout << setw(alignment) << table.Elements[row][col] << setw((totalHeadLineAligment - alignment) + 1);
			
			cout << "|";
		}
		cout << endl;

	}
	void PrintTable(stTable& table) {
		PrintHeader(table);
		for (int row = 0; row < table.rows; row++)
		{
			PrintTableRow(table, row);
			PrintTableBorder(table);
		}
	}

	void CreatTable() {
		stTable table;

		ReadTable(table);
		ReadTableElements(table);
		PrintTable(table);
	}
}

namespace File {
	bool ReadLine(istream& input, string& line, char delimitar = '\n') {

		line.clear();

		char c;

		while (input.get(c)) {

			if (c == delimitar) break;
			line += c;
		}

		return !line.empty() || !input.eof();


	}

	void PrintFileContent(string PathToFile) {

		fstream file(PathToFile, ios::in);

		if (file.is_open()) {
			string line;
			while (getline(file, line))
				cout << line << '\n';
		}



	}

	void LoadDataFromFileToVector(string PathToFile, vector <string>& vFileContent) {
		fstream file(PathToFile, ios::in);
		if (file.is_open()) {
			string line;
			while (getline(file, line))
				vFileContent.push_back(line);
		}
	}

	void SaveVectorToFile(string PathToFile, vector <string>& vFileContent) {
		fstream file;
		file.open(PathToFile, ios::out);

		if (file.is_open()) {
			for (string& line : vFileContent)
				if (line != "")
					file << line << endl;
		}
	}

	void DeletRecordFromFile(string PathToFile, string DeletedRecord) {
		vector <string> FileContent;

		LoadDataFromFileToVector(PathToFile, FileContent);

		for (string& line : FileContent) {
			String::RemoveWordFromString(line, DeletedRecord);
		}

		SaveVectorToFile(PathToFile, FileContent);

	}

	void UpdateRecordInFile(string PathToFile, string record, string newRecord) {
		vector<string> FileContent;
		LoadDataFromFileToVector(PathToFile, FileContent);

		for (string& line : FileContent) {
			String::SwapWordInString(line, record, newRecord);
		}

		SaveVectorToFile(PathToFile, FileContent);

	}

}
